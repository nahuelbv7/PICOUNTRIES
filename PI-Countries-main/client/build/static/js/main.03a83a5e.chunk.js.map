{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","countries","setCountries","myFunc","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","apiData","wrap","_context","prev","next","axios","get","sent","data","results","stop","apply","arguments","useEffect","_jsx","className","children","length","map","c","name","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"6OAgCeA,MA1Bf,WACE,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAExBI,EAAM,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,IAAMC,IAAI,mCAAmC,KAAD,EAA5DN,EAAOE,EAAAK,KACbd,EAAaO,EAAQQ,KAAKC,SAAQ,wBAAAP,EAAAQ,OAAA,GAAAX,EAAA,KACnC,kBAHW,OAAAJ,EAAAgB,MAAA,KAAAC,UAAA,KAYZ,OAPAC,qBAAU,WACRnB,GACF,IAMEoB,cAAA,OAAKC,UAAU,MAAKC,SACjBxB,EAAUyB,OACTzB,EAAU0B,KAAI,SAACC,GAAC,OAAKL,cAAA,KAAAE,SAAeG,EAAEC,MAATD,EAAEE,GAAgB,IAE7CP,cAAA,KAAAE,SAAG,gBAIb,EClBeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAA9B,GAAkD,IAA/C+B,EAAM/B,EAAN+B,OAAQC,EAAMhC,EAANgC,OAAQC,EAAMjC,EAANiC,OAAQC,EAAMlC,EAANkC,OAAQC,EAAOnC,EAAPmC,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJAQ,IAASC,OACPlB,cAACmB,IAAMC,WAAU,CAAAlB,SACfF,cAAC3B,EAAG,MAENgD,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.03a83a5e.chunk.js","sourcesContent":["import './App.css';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n\n  const myFunc = async () => {\n    const apiData = await axios.get(\"http://localhost:3001/countries\");\n    setCountries(apiData.data.results)\n  };\n\n  useEffect(() => {\n    myFunc();\n  },);\n\n\n\n\n  return (\n    <div className=\"App\">\n      {countries.length ? (\n        countries.map((c) => <p key={c.id}>{c.name}</p>)\n         ) : (\n          <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}